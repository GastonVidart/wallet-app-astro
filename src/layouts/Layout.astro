---
import Header from "@/components/Layout/Header.astro";
import SidebarNav from "@/components/Layout/SidebarNav.astro";

import pkg from "../../package.json" assert { type: "json" };
import { ModeToggle } from "@/components/ModeToggle";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <meta name="generator" content={Astro.generator} />
    <meta name="author" content={pkg.author} />

    <title>{title}</title>
  </head>
  <body>
    <Header />
    <SidebarNav />
    <main class="p-4 sm:ml-64 dark:bg-gray-900">
      <div
        id="main-content"
        class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 mt-14"
      >
        <slot />
        {/*<FooterSidebar />*/}
      </div>
    </main>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
